/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IStoresClient {
    getAll(): Observable<StoresListViewModel | null>;
    create(command: CreateStoreCommand): Observable<string>;
    get(id: string): Observable<StoreViewModel | null>;
    update(id: string, command: UpdateStoreCommand): Observable<void>;
}

@Injectable()
export class StoresClient implements IStoresClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<StoresListViewModel | null> {
        let url_ = this.baseUrl + "/api/Stores";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<StoresListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoresListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<StoresListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? StoresListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoresListViewModel | null>(<any>null);
    }

    create(command: CreateStoreCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Stores";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    get(id: string): Observable<StoreViewModel | null> {
        let url_ = this.baseUrl + "/api/Stores/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<StoreViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<StoreViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<StoreViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? StoreViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StoreViewModel | null>(<any>null);
    }

    update(id: string, command: UpdateStoreCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Stores/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface ICustomersClient {
    getAll(): Observable<CustomersListViewModel | null>;
}

@Injectable()
export class CustomersClient implements ICustomersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<CustomersListViewModel | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<CustomersListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomersListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CustomersListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomersListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomersListViewModel | null>(<any>null);
    }
}

export interface IProductsClient {
    getAll(): Observable<ProductsListViewModel | null>;
    create(command: CreateProductCommand): Observable<string>;
    get(id: string): Observable<ProductViewModel | null>;
    update(id: string, command: UpdateProductCommand): Observable<void>;
}

@Injectable()
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<ProductsListViewModel | null> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ProductsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ProductsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductsListViewModel | null>(<any>null);
    }

    create(command: CreateProductCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    get(id: string): Observable<ProductViewModel | null> {
        let url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ProductViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ProductViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductViewModel | null>(<any>null);
    }

    update(id: string, command: UpdateProductCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface ISalesClient {
    getAll(): Observable<SalesListViewModel | null>;
    create(command: CreateSaleCommand): Observable<IDischargeReturn | null>;
    get(id: string): Observable<SalesDto | null>;
}

@Injectable()
export class SalesClient implements ISalesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<SalesListViewModel | null> {
        let url_ = this.baseUrl + "/api/Sales";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<SalesListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SalesListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<SalesListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalesListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SalesListViewModel | null>(<any>null);
    }

    create(command: CreateSaleCommand): Observable<IDischargeReturn | null> {
        let url_ = this.baseUrl + "/api/Sales";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<IDischargeReturn | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<IDischargeReturn | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<IDischargeReturn | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? IDischargeReturn.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IDischargeReturn | null>(<any>null);
    }

    get(id: string): Observable<SalesDto | null> {
        let url_ = this.baseUrl + "/api/Sales/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SalesDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SalesDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SalesDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SalesDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SalesDto | null>(<any>null);
    }
}

export class StoresListViewModel implements IStoresListViewModel {
    stores?: StoreLookupModel[] | undefined;

    constructor(data?: IStoresListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["stores"] && data["stores"].constructor === Array) {
                this.stores = [] as any;
                for (let item of data["stores"])
                    this.stores!.push(StoreLookupModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StoresListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new StoresListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.stores && this.stores.constructor === Array) {
            data["stores"] = [];
            for (let item of this.stores)
                data["stores"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStoresListViewModel {
    stores?: StoreLookupModel[] | undefined;
}

export class StoreLookupModel implements IStoreLookupModel {
    id?: string;
    name?: string | undefined;

    constructor(data?: IStoreLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): StoreLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new StoreLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IStoreLookupModel {
    id?: string;
    name?: string | undefined;
}

export class StoreViewModel implements IStoreViewModel {
    id?: string;
    name?: string | undefined;

    constructor(data?: IStoreViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): StoreViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new StoreViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IStoreViewModel {
    id?: string;
    name?: string | undefined;
}

export class CreateStoreCommand implements ICreateStoreCommand {
    name?: string | undefined;

    constructor(data?: ICreateStoreCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CreateStoreCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStoreCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateStoreCommand {
    name?: string | undefined;
}

export class UpdateStoreCommand implements IUpdateStoreCommand {
    id?: string;
    name?: string | undefined;

    constructor(data?: IUpdateStoreCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UpdateStoreCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStoreCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUpdateStoreCommand {
    id?: string;
    name?: string | undefined;
}

export class CustomersListViewModel implements ICustomersListViewModel {
    customers?: CustomerLookupModel[] | undefined;

    constructor(data?: ICustomersListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["customers"] && data["customers"].constructor === Array) {
                this.customers = [] as any;
                for (let item of data["customers"])
                    this.customers!.push(CustomerLookupModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomersListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomersListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.customers && this.customers.constructor === Array) {
            data["customers"] = [];
            for (let item of this.customers)
                data["customers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICustomersListViewModel {
    customers?: CustomerLookupModel[] | undefined;
}

export class CustomerLookupModel implements ICustomerLookupModel {
    id?: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: ICustomerLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.middleName = data["middleName"];
            this.lastName = data["lastName"];
        }
    }

    static fromJS(data: any): CustomerLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        return data; 
    }
}

export interface ICustomerLookupModel {
    id?: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
}

export class ProductsListViewModel implements IProductsListViewModel {
    products?: ProductLookupModel[] | undefined;

    constructor(data?: IProductsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(ProductLookupModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductsListViewModel {
    products?: ProductLookupModel[] | undefined;
}

export class ProductLookupModel implements IProductLookupModel {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    store?: string;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
    images?: ProductImage[] | undefined;

    constructor(data?: IProductLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.store = data["store"];
            this.categories = data["categories"];
            this.tags = data["tags"];
            this.price = data["price"];
            this.sku = data["sku"];
            this.quantity = data["quantity"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            if (data["images"] && data["images"].constructor === Array) {
                this.images = [] as any;
                for (let item of data["images"])
                    this.images!.push(ProductImage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["store"] = this.store;
        data["categories"] = this.categories;
        data["tags"] = this.tags;
        data["price"] = this.price;
        data["sku"] = this.sku;
        data["quantity"] = this.quantity;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (this.images && this.images.constructor === Array) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductLookupModel {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    store?: string;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
    images?: ProductImage[] | undefined;
}

export class ProductImage implements IProductImage {
    id?: string;
    product?: Product | undefined;
    url?: string | undefined;

    constructor(data?: IProductImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.product = data["product"] ? Product.fromJS(data["product"]) : <any>undefined;
            this.url = data["url"];
        }
    }

    static fromJS(data: any): ProductImage {
        data = typeof data === 'object' ? data : {};
        let result = new ProductImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["url"] = this.url;
        return data; 
    }
}

export interface IProductImage {
    id?: string;
    product?: Product | undefined;
    url?: string | undefined;
}

export class Product implements IProduct {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    storeId?: string;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
    images?: ProductImage[] | undefined;
    productsSale?: ProductSale[] | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.storeId = data["storeId"];
            this.categories = data["categories"];
            this.tags = data["tags"];
            this.price = data["price"];
            this.sku = data["sku"];
            this.quantity = data["quantity"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            if (data["images"] && data["images"].constructor === Array) {
                this.images = [] as any;
                for (let item of data["images"])
                    this.images!.push(ProductImage.fromJS(item));
            }
            if (data["productsSale"] && data["productsSale"].constructor === Array) {
                this.productsSale = [] as any;
                for (let item of data["productsSale"])
                    this.productsSale!.push(ProductSale.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["storeId"] = this.storeId;
        data["categories"] = this.categories;
        data["tags"] = this.tags;
        data["price"] = this.price;
        data["sku"] = this.sku;
        data["quantity"] = this.quantity;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (this.images && this.images.constructor === Array) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        if (this.productsSale && this.productsSale.constructor === Array) {
            data["productsSale"] = [];
            for (let item of this.productsSale)
                data["productsSale"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProduct {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    storeId?: string;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
    images?: ProductImage[] | undefined;
    productsSale?: ProductSale[] | undefined;
}

export class ProductSale implements IProductSale {
    id?: string;
    sale?: Sale | undefined;
    productId?: string;
    unitPrice?: number;
    quantity?: number;

    constructor(data?: IProductSale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.sale = data["sale"] ? Sale.fromJS(data["sale"]) : <any>undefined;
            this.productId = data["productId"];
            this.unitPrice = data["unitPrice"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): ProductSale {
        data = typeof data === 'object' ? data : {};
        let result = new ProductSale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sale"] = this.sale ? this.sale.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IProductSale {
    id?: string;
    sale?: Sale | undefined;
    productId?: string;
    unitPrice?: number;
    quantity?: number;
}

export class Sale implements ISale {
    id?: string;
    customer?: Customer | undefined;
    address?: Address | undefined;
    created?: Date;
    status?: string | undefined;
    productsSale?: ProductSale[] | undefined;

    constructor(data?: ISale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : <any>undefined;
            this.address = data["address"] ? Address.fromJS(data["address"]) : <any>undefined;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.status = data["status"];
            if (data["productsSale"] && data["productsSale"].constructor === Array) {
                this.productsSale = [] as any;
                for (let item of data["productsSale"])
                    this.productsSale!.push(ProductSale.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Sale {
        data = typeof data === 'object' ? data : {};
        let result = new Sale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["status"] = this.status;
        if (this.productsSale && this.productsSale.constructor === Array) {
            data["productsSale"] = [];
            for (let item of this.productsSale)
                data["productsSale"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISale {
    id?: string;
    customer?: Customer | undefined;
    address?: Address | undefined;
    created?: Date;
    status?: string | undefined;
    productsSale?: ProductSale[] | undefined;
}

export class Customer implements ICustomer {
    id?: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    contact?: Contact | undefined;
    addresses?: Address[] | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.middleName = data["middleName"];
            this.lastName = data["lastName"];
            this.contact = data["contact"] ? Contact.fromJS(data["contact"]) : <any>undefined;
            if (data["addresses"] && data["addresses"].constructor === Array) {
                this.addresses = [] as any;
                for (let item of data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (this.addresses && this.addresses.constructor === Array) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICustomer {
    id?: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    contact?: Contact | undefined;
    addresses?: Address[] | undefined;
}

export class Contact implements IContact {
    id?: string;
    email?: string | undefined;
    email2?: string | undefined;
    language?: string | undefined;

    constructor(data?: IContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
            this.email2 = data["email2"];
            this.language = data["language"];
        }
    }

    static fromJS(data: any): Contact {
        data = typeof data === 'object' ? data : {};
        let result = new Contact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["email2"] = this.email2;
        data["language"] = this.language;
        return data; 
    }
}

export interface IContact {
    id?: string;
    email?: string | undefined;
    email2?: string | undefined;
    language?: string | undefined;
}

export class Address implements IAddress {
    id?: string;
    zipCode?: string | undefined;
    street?: string | undefined;
    number?: string | undefined;
    district?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    customer?: Customer | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.zipCode = data["zipCode"];
            this.street = data["street"];
            this.number = data["number"];
            this.district = data["district"];
            this.city = data["city"];
            this.country = data["country"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["zipCode"] = this.zipCode;
        data["street"] = this.street;
        data["number"] = this.number;
        data["district"] = this.district;
        data["city"] = this.city;
        data["country"] = this.country;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAddress {
    id?: string;
    zipCode?: string | undefined;
    street?: string | undefined;
    number?: string | undefined;
    district?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    customer?: Customer | undefined;
}

export class ProductViewModel implements IProductViewModel {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    store?: string;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
    images?: ProductImage[] | undefined;
    editEnabled?: boolean;
    deleteEnabled?: boolean;

    constructor(data?: IProductViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.store = data["store"];
            this.categories = data["categories"];
            this.tags = data["tags"];
            this.price = data["price"];
            this.sku = data["sku"];
            this.quantity = data["quantity"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            if (data["images"] && data["images"].constructor === Array) {
                this.images = [] as any;
                for (let item of data["images"])
                    this.images!.push(ProductImage.fromJS(item));
            }
            this.editEnabled = data["editEnabled"];
            this.deleteEnabled = data["deleteEnabled"];
        }
    }

    static fromJS(data: any): ProductViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["store"] = this.store;
        data["categories"] = this.categories;
        data["tags"] = this.tags;
        data["price"] = this.price;
        data["sku"] = this.sku;
        data["quantity"] = this.quantity;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (this.images && this.images.constructor === Array) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["editEnabled"] = this.editEnabled;
        data["deleteEnabled"] = this.deleteEnabled;
        return data; 
    }
}

export interface IProductViewModel {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    store?: string;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
    images?: ProductImage[] | undefined;
    editEnabled?: boolean;
    deleteEnabled?: boolean;
}

export class CreateProductCommand implements ICreateProductCommand {
    name?: string | undefined;
    description?: string | undefined;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    imagesUploading?: string[] | undefined;

    constructor(data?: ICreateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.categories = data["categories"];
            this.tags = data["tags"];
            this.price = data["price"];
            this.sku = data["sku"];
            this.quantity = data["quantity"];
            if (data["imagesUploading"] && data["imagesUploading"].constructor === Array) {
                this.imagesUploading = [] as any;
                for (let item of data["imagesUploading"])
                    this.imagesUploading!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["categories"] = this.categories;
        data["tags"] = this.tags;
        data["price"] = this.price;
        data["sku"] = this.sku;
        data["quantity"] = this.quantity;
        if (this.imagesUploading && this.imagesUploading.constructor === Array) {
            data["imagesUploading"] = [];
            for (let item of this.imagesUploading)
                data["imagesUploading"].push(item);
        }
        return data; 
    }
}

export interface ICreateProductCommand {
    name?: string | undefined;
    description?: string | undefined;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    imagesUploading?: string[] | undefined;
}

export class UpdateProductCommand implements IUpdateProductCommand {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;

    constructor(data?: IUpdateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.categories = data["categories"];
            this.tags = data["tags"];
            this.price = data["price"];
            this.sku = data["sku"];
            this.quantity = data["quantity"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["categories"] = this.categories;
        data["tags"] = this.tags;
        data["price"] = this.price;
        data["sku"] = this.sku;
        data["quantity"] = this.quantity;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUpdateProductCommand {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    categories?: string | undefined;
    tags?: string | undefined;
    price?: number;
    sku?: string | undefined;
    quantity?: number;
    created?: Date;
}

export class SalesListViewModel implements ISalesListViewModel {
    sales?: SalesDto[] | undefined;

    constructor(data?: ISalesListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["sales"] && data["sales"].constructor === Array) {
                this.sales = [] as any;
                for (let item of data["sales"])
                    this.sales!.push(SalesDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.sales && this.sales.constructor === Array) {
            data["sales"] = [];
            for (let item of this.sales)
                data["sales"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISalesListViewModel {
    sales?: SalesDto[] | undefined;
}

export class SalesDto implements ISalesDto {
    id?: string;
    customer?: Customer | undefined;
    address?: Address | undefined;
    created?: Date;
    status?: string | undefined;
    productsSale?: ProductSale[] | undefined;

    constructor(data?: ISalesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : <any>undefined;
            this.address = data["address"] ? Address.fromJS(data["address"]) : <any>undefined;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.status = data["status"];
            if (data["productsSale"] && data["productsSale"].constructor === Array) {
                this.productsSale = [] as any;
                for (let item of data["productsSale"])
                    this.productsSale!.push(ProductSale.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SalesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["status"] = this.status;
        if (this.productsSale && this.productsSale.constructor === Array) {
            data["productsSale"] = [];
            for (let item of this.productsSale)
                data["productsSale"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISalesDto {
    id?: string;
    customer?: Customer | undefined;
    address?: Address | undefined;
    created?: Date;
    status?: string | undefined;
    productsSale?: ProductSale[] | undefined;
}

export abstract class IDischargeReturn implements IIDischargeReturn {

    constructor(data?: IIDischargeReturn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): IDischargeReturn {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IDischargeReturn' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIDischargeReturn {
}

export class CreateSaleCommand implements ICreateSaleCommand {
    customer?: Customer | undefined;
    address?: Address | undefined;
    productsSale?: ProductSale[] | undefined;
    payment?: DischargePayment | undefined;

    constructor(data?: ICreateSaleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : <any>undefined;
            this.address = data["address"] ? Address.fromJS(data["address"]) : <any>undefined;
            if (data["productsSale"] && data["productsSale"].constructor === Array) {
                this.productsSale = [] as any;
                for (let item of data["productsSale"])
                    this.productsSale!.push(ProductSale.fromJS(item));
            }
            this.payment = data["payment"] ? DischargePayment.fromJS(data["payment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateSaleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSaleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        if (this.productsSale && this.productsSale.constructor === Array) {
            data["productsSale"] = [];
            for (let item of this.productsSale)
                data["productsSale"].push(item.toJSON());
        }
        data["payment"] = this.payment ? this.payment.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateSaleCommand {
    customer?: Customer | undefined;
    address?: Address | undefined;
    productsSale?: ProductSale[] | undefined;
    payment?: DischargePayment | undefined;
}

export class DischargePayment implements IDischargePayment {
    paymentMethod?: string | undefined;
    creditCard?: CreditCard | undefined;

    constructor(data?: IDischargePayment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.paymentMethod = data["paymentMethod"];
            this.creditCard = data["creditCard"] ? CreditCard.fromJS(data["creditCard"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DischargePayment {
        data = typeof data === 'object' ? data : {};
        let result = new DischargePayment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentMethod"] = this.paymentMethod;
        data["creditCard"] = this.creditCard ? this.creditCard.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IDischargePayment {
    paymentMethod?: string | undefined;
    creditCard?: CreditCard | undefined;
}

export class CreditCard implements ICreditCard {
    number?: string | undefined;
    holderName?: string | undefined;
    expMonth?: number;
    expYear?: number;
    cvv?: string | undefined;

    constructor(data?: ICreditCard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.number = data["number"];
            this.holderName = data["holderName"];
            this.expMonth = data["expMonth"];
            this.expYear = data["expYear"];
            this.cvv = data["cvv"];
        }
    }

    static fromJS(data: any): CreditCard {
        data = typeof data === 'object' ? data : {};
        let result = new CreditCard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["holderName"] = this.holderName;
        data["expMonth"] = this.expMonth;
        data["expYear"] = this.expYear;
        data["cvv"] = this.cvv;
        return data; 
    }
}

export interface ICreditCard {
    number?: string | undefined;
    holderName?: string | undefined;
    expMonth?: number;
    expYear?: number;
    cvv?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}